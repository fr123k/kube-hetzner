circleci-image: &circleci-image
  - image: fr123k/circleci-golang:latest

master-filter: &master-filter
  filters:
    branches:
      only:
        - master
        - circleci-project-setup

preflight-master-filter: &preflight-master-filter
  <<: *master-filter
  requires:
    - preflight

non-master-filter: &non-master-filter
  filters:
    branches:
      ignore:
        - master

preflight-non-master-filter: &preflight-non-master-filter
  <<: *non-master-filter
  requires:
    - preflight

version: 2.1
orbs:
  vpn: titel-media/wireguard@0.2.1
commands:
  run-terraform-fmt:
    steps:
      - run:
          name: check hcl syntax with terraform fmt
          command: |
            # terraform modules check
            for mod in $(find ./modules -type d); do terraform fmt -check ${mod}; done
            # iterate over the tf files changed in this pr and run terraform fmt
            for tffile in $(git diff master...HEAD --name-status --diff-filter=ACMR | awk '{print $2}' | grep -v "boilerplate" | grep ".tf\|.tfvars"); do

              tftarget=$(echo $tffile | rev | cut -d'/' -f3- | rev)

              terraform fmt -check -diff -recursive ${tftarget}

            done

  post-terraform-plan:
    parameters:
      command:
        type: string
        default: ""
      pr_number:
        type: string
        default: "echo ${CIRCLE_PULL_REQUEST##*/}"
    steps:
      - run:
          name: post terraform << parameters.command >>
          command: |
            cmd=<< parameters.command >>

            export CMD=${cmd}
            export PR_NUMBER=$(<< parameters.pr_number >>)
            echo "PR_NUMBER ${PR_NUMBER}"

            if [[ ! -z "${PR_NUMBER}" && -f "terraform-${cmd}.out" ]]; then
              github-comment hide --config .circleci/github-comment.yaml -pr ${PR_NUMBER} -k plan
              export TERRAFORM_RESOURCE_SUMMARY=$(cat terraform-${cmd}.out | grep -E '(^.*[#] .*|^[[:punct:]]{2})' | grep -v "unchanged attributes hidden" | grep -v "unchanged attribute hidden" | grep -v "unchanged block hidden")
              export TERRAFORM_PLAN_SUMMARY=$(cat terraform-${cmd}.out | grep -E '(Plan)')
              export TERRAFORM_ERROR=$(cat terraform-${cmd}.out | grep "Error:")

              github-comment exec --config .circleci/github-comment.yaml -pr ${PR_NUMBER} -k plan -- cat terraform-${cmd}.out
            fi
          when: always
  run-terraform-command:
    parameters:
      command:
        type: string
        default: "apply"
      git_diff:
        type: string
        default: "origin/master...HEAD"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "90:f4:0e:ce:92:c1:ab:06:18:d6:08:6d:8b:31:df:e8"
            - "5f:bb:89:b9:c9:60:4a:bc:2d:9e:6c:f2:80:95:1b:f0"

      - run:
          name: generate ssh public key
          command: |
            ssh-keygen -y -f ~/.ssh/id_rsa_5fbb89b9c9604abc2d9e6cf280951bf0 > ~/.ssh/id_rsa_5fbb89b9c9604abc2d9e6cf280951bf0.pub

      - run:
          name: terraform << parameters.command >>
          command: |
            git_diff=<< parameters.git_diff >>
            command=<< parameters.command >>
            cliargs="-no-color"

            case ${command} in
              plan)     cliargs="${cliargs} -lock=false"
                        tfcmd=plan
                        ;;
              apply)    cliargs="${cliargs} -auto-approve"
                        tfcmd=apply
                        ;;
              destroy)  cliargs="${cliargs} -destroy -auto-approve"
                        tfcmd=apply
                        ;;
            esac

            ## Init needed Terraform Vars like ssh keys, ...
            export TF_VAR_private_key=~/.ssh/id_rsa_5fbb89b9c9604abc2d9e6cf280951bf0
            export TF_VAR_public_key=~/.ssh/id_rsa_5fbb89b9c9604abc2d9e6cf280951bf0.pub

            rm -fv terraform-${command}.out
            # otherwise the go-git clone command fails
            ssh-add -D
            ssh-add /home/circleci/.ssh/id_rsa_90f40ece92c1ab0618d6086d8b31dfe8

            TF_BACKEND_HTTP_ENCRYPTION_PASSPHRASE=${TF_BACKEND_HTTP_ENCRYPTION_PASSPHRASE} terraform-backend-git --access-logs &

            git --no-pager diff ${git_diff} --name-status --diff-filter=ACMR

            # iterate over the .tfvars and .tf changed files in this pr and try to run terraform apply
            for tfvarfile in $(git diff ${git_diff} --name-status --diff-filter=ACMR | awk '{print $2}' | grep -E "(.*.tf|.*.tfvars)"); do

              tffile=$(echo $tfvarfile)
              
              # Avoid multiple terraform plan execution in the same folder because both .tfvars and .tf file were changed.
              # if the .terraform folder already exist then terraform plan was already executed so skip it.
              if [[ -d "${tffile}/.terraform" ]]; then
                echo "Skip Terraform init/plan for target: ${tffile} already done"
                continue
              fi

              echo "Running Terraform plan for target: ${tfvarfile}"
              terraform init -lock-timeout=3m 2>&1 | tee -a terraform-${command}.out
              terraform ${tfcmd} -lock-timeout=3m ${cliargs} 2>&1 | tee -a terraform-${command}.out

            done
          when: always
  install-dependency:
    steps:
      - run:
          name: install wireguard dependencies
          command: |
            sudo apt-get update
            sudo apt-get install resolvconf
            echo -n "${WIREGUARD_CONFIG:?}" | \
              base64 -d | \
              sed "s/0.0.0.0\/0/10.0.0.0\/8/g" > wg0.conf
            sudo mkdir -p /etc/wireguard
            sudo mv wg0.conf /etc/wireguard/wg0.conf
            sudo chmod 600 /etc/wireguard/wg0.conf
  wgconf:
    steps:
      - run:
          name: cat wg.conf
          command: |
            sudo cat /etc/wireguard/wg0.conf
  connect-wireguard:
    steps:
      - vpn/install
      # - vpn/initialize
      - vpn/connect
      - run: ping 10.8.0.3 -c 4
      - run: ping 10.0.0.2 -c 400
      - run: curl ifconfig.me.
      # - vpn/disconnect

jobs:
  preflight:
    docker: *circleci-image
    resource_class: small
    steps:
      - checkout
      - run-terraform-fmt

  terraform-plan:
    docker: *circleci-image
    resource_class: small
    steps:
      - checkout
      - run-terraform-command:
          command: plan
      - store_artifacts:
          path: ./terraform-plan.out
          destination: terraform-plan.out
      - post-terraform-plan:
          command: plan

  terraform-apply:
    docker: *circleci-image
    resource_class: small
    parameters:
      destroy:
        type: boolean
        default: false
    steps:
      - checkout
      - run-terraform-command:
          command: apply
        # git_diff: HEAD~1
      - store_artifacts:
          path: ./terraform-apply.out
          destination: terraform-apply.out
      - post-terraform-plan:
          command: apply
          # pr_number: "git log --format=format:%s -n 1 | grep -Eo '#([0-9]*)' | cut -c 2-"
      - when:
          condition: << parameters.destroy >>
          steps:
          - run-terraform-command:
              command: destroy
            # git_diff: HEAD~1
          - store_artifacts:
              path: ./terraform-destroy.out
              destination: terraform-destroy.out
          - post-terraform-plan:
              command: destroy
              # pr_number: "git log --format=format:%s -n 1 | grep -Eo '#([0-9]*)' | cut -c 2-"
  wireguard:
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    environment:
      WIREGUARD_CONFIG: "W0ludGVyZmFjZV0KQWRkcmVzcyA9IDEwLjguMC42LzMyClByaXZhdGVLZXkgPSBnTGRRSVhmM0pmaU9udlBpTytMemE1Vmx4U0tsd2FWSHpKeHdxOSs4MUZVPQpETlMgPSAxLjEuMS4xCgpbUGVlcl0KUHVibGljS2V5ID0gc2xWNUxxRmtLTHcxdklCSnRYY0xCNFhMM3ZjTmd2clZua210Zm5DZ2FGND0KUHJlc2hhcmVkS2V5ID0ganh5bnJCcmRZMzY0WVh5M0FwTWRxZnRvYktWRElPTGc5QUVGaHhPQy9KWT0KQWxsb3dlZElQcyA9IDAuMC4wLjAvMApFbmRwb2ludCA9IDQ5LjEyLjE5NS41OjUxODIwClBlcnNpc3RlbnRLZWVwYWxpdmUgPSAxNQo="
    steps:
      - install-dependency
      - connect-wireguard
      - wgconf

workflows:
  preflight:
    jobs:
      - preflight:
          <<: *non-master-filter
      - wireguard
      - terraform-plan:
          <<: *preflight-non-master-filter
  rollout:
    jobs:
      - preflight:
          <<: *master-filter
      - terraform-apply:
          <<: *preflight-master-filter
          requires:
            - preflight
          destroy: true
